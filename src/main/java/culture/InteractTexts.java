package culture;

import java.util.*;

public class InteractTexts extends ListResourceBundle {
	static final Object[][] contents = {
			{ "sentenceSeparation", ". " },
			{ "clauseSeparation", ", " },
			{ "colon", ":" },
			{ "space", " " },
			{ "comma", "," },
			{ "point", "." },
			{ "tab", "\t" },
			{ "leftBracket", "[" },
			{ "rightBracket", "]" },
			{ "paragraphCommand", "\n" },
			{ "continuing", "Continuing with " },
			{
					"operationType",
					new String[] { "Select options", "Explore a self", 
							"Define interactants","Define situation",
							"Define events", "Analyze events", 
							"Interactions", "Find concepts",
							"Feeling effects", "View equations",
							"Import/Export", "View report" } },
			{ "displayType",
					new String[] { "Basic functions", "Advanced functions" } },
			{
					"cultureType",
					new String[] { "Indiana 2002-4", "Texas 1998",
							"North Carolina 1978", "Ontario Canada 1980-6",
							"Ontario Canada 2001", "N. Ireland 1977",
							"Germany 1989", "Germany 2007", "Japan 1989-2002",
							"China-PRC 1991", "Deutsch Germany 1989",
							"Deutsch Germany 2007" } },
			{ "evaluation", "E" },
			{ "potency", "P" },
			{ "activity", "A" },
			{ "namingLabel", "Name" },
			{ "biologyLabel", "Sex" },
			{ "languageLabel", "Language" },
			{ "controllingLabel", "Controlling" },
			{ "personText", "Person " },
			{ "selfText", "Self" },
			{ "named", "called" },
			{ "raterSex", "Sex of Raters" },
			{ "viewer", "For viewer" },
			{ "male", "Male" },
			{ "female", "Female" },
			{ "theSettingIs", "in setting" },
			{ "thePersonIs", "is" },
			{ "institution", "Institution" },
			{ "combination", "Combination" },
			{ "actor", "Actor" },
			{ "behavior", "Behavior" },
			{ "object", "Object person" },
			{ "obj", "Object" },
			{ "setting", "Setting" },
			{ "prior", "Use events of Person 1" },
			{ "includeBehaviors", " Switch to:" },
			{ "insert", "Insert this event" },
			{
					"behaviorMeaning",
					new String[] { "No repeats",
							"Constant transients",
							"Evolving transients" } },
			{ "experiences", "Experiences of " },
			{ "actorEmotions", "Actor emotions" },
			{ "objectEmotions", "Object person emotions" },
			{ "present", "Now" },
			{ "future", "Next" },
			{ "identityPressureLeft", "    {" },
			{ "identityPressureRight", "   }" },
			{ "objectBehaviors", "Expected object person response" },
			{ "actorAttributes", "Actor characteristics" },
			{ "objectAttributes", "Object person characteristics" },
			{ "actorLabels", "Who would do the action" },
			{ "objectLabels", "Who would befit the action" },
			{ "changeConceptGatesButton", "Concept gates" },
			{ "personalTensionEquals", "Tension = " },
			{ "optimalObjectIs", "Top alter: " },
			{ "optimalBehavior", "Optimal act" },
			{ "titleForBehaviors", "Possible behaviors:" },
			{ "actionButtonText", "Perform this action" },
			{ "emptyResults", "No words in range" },
			{ "EPAprofile", "Entries matching EPA profile" },
			{ "cutoffInstruction",
					"Type number for maximum distance, press Enter. " },
			{
					"caseNames",
					new String[] { "Identities", "Behaviors", "Modifiers",
							"Settings" } },
			{
					"identityConceptGates",
					new String[] { "Male", "Female", "Lay", "Business", "Law",
							"Politics", "Academe", "Medicine", "Religion",
							"Family", "Sexual", "", "", "" } },
			{
					"behaviorConceptGates",
					new String[] { "Overt", "Surmised", "Lay", "Business",
							"Law", "Politics", "Academe", "Medicine",
							"Religion", "Family", "Sexual", "Monadic",
							"Group", "Corporal" } },
			{
					"modifierConceptGates",
					new String[] { "Adjective", "", "Emotion", "Trait",
							"Status", "Feature", "", "", "", "", "", "", "", "" } },
			{
					"settingConceptGates",
					new String[] { "Place", "Time", "Lay", "Business", "Law",
							"Politics", "Academe", "Medicine", "Religion",
							"Family", "Sexual", "", "", "" } },
			{ "allConceptGates", "All institutions" },
			{ "settingTitle", "Setting" },
			{ "fundamental", "Fundamental" },
			{ "transient", "Transient" },
			{
				"equationStudies",
				new String[] { "U.S.A. 1978",
						"Japan 1984",
						"Canada 1985",
						"Canada re-est",
						"China 2000",
						"Germany 2007" } },
			{
					"equations",
					new String[] { "Select a subset of equations.",
							"Male Actor-Behavior-Object",
							"Female Actor-Behavior-Object",
							"Male Actor-Behavior-Object-Setting",
							"Female Actor-Behavior-Object-Setting",
							"Male Self-Directed ACTAction",
							"Female Self-Directed ACTAction",
							"Male Trait-Identity", "Female Trait-Identity",
							"Male Emotion-Identity", "Female Emotion-Identity" } },
			{ "importEquationCoefficientsButton",
					"Import the coefficients below" },
			{ "maleRaters", "Male data" },
			{ "femaleRaters", "Female data" },
			{ "solveFor", "Solve for:" },
			{ "actorIdentity", "Actor Identity" },
			{ "objectIdentity", "Object Identity" },
			{ "actorMood", "Actor mood" },
			{ "objectMood", "Object mood" },
			{ "characteristicEmotion", "Characteristic emotion" },
			{ "givenActor", "Actor identity" },
			{ "givenObject", "Object identity" },
			{ "actorSelf", "Actor's self" },
			{ "objectSelf", "Object's self" },
			{ "thisBehavior", "Behavior" },
			{ "compute", "Compute solution" },
			{ "individualAmalgamation", "Amalgamation" },
			{ "individualTransient", "Transient" },
			{ "selfProfile", "Self EPA" },
			{ "divergenceProfile", "Divergence EPA " },
			{ "boundsTitle", "Bounds" },
			{ "actualizingList", "Self-Actualizing Identities" },
			{ "circuitingList", "Sustaining Identities     " },
			{ "redeemingList", "Redeeming Identities" },
			{ "distantList", "Other Possible Identities" },
			{ "writeTo", "Write To " },
			{ "javaConsole", "Java Console" },
			{ "processing", "Processing" },
			{ "sentimentFormation", "Sentiment Formation" },
			{ "searchCutoff", "Search cut-off distance" },
			{ "interactantsN", "Number of interactants" },
			{ "rememberN", "Number of events to remember" },
			{ "impressions", "Fundamentals, impressions" },
			{ "deflections", "Deflections" },
			{ "actorEmotions", "Actor emotions" },
			{ "objectEmotions", "Object emotions" },
			{ "actorBehaviors", "Actor behaviors" },
			{ "objectBehaviors", "Object behaviors" },
			{ "actorLabels", "Actor labels" },
			{ "objectLabels", "Object labels" },
			{ "actorAttributes", "Actor attributes" },
			{ "objectAttributes", "Object attributes" },
			{ "chart", "Chart" },
			{ "lists", "Lists" },
			{ "verbalEvents", "Verbal events" },
			{ "batchRuns", "Run events automatically" },
			{ "keepRecords", "Record all events" },
			{ "fromReidents", "From labelings" },
			{ "fromTransients", "From transients" },
			{ "eventProblemTitle", "Event problem" },
			{
					"storeEventsError",
					new String[] { "Actor name unrecognized.",
							"Actor has no identity.",
							"Actor's identity is not in dictionary.",
							"Actor's modifier is not in dictionary.",
							"Behavior is not in dictionary.",
							"Object name unrecognized.",
							"Object has no identity.",
							"Object's identity is not in dictionary.",
							"Object's modifier is not in dictionary",
							"Too many words on a line.", "Unrecognized token.",
							"Incomplete line.", "Too many events." } },
			{ "empty", "_" },
			{ "ok", "Okay" },
			{ "done", "Done." },
			{ "error", "Error" },
			{ "earlierEvent", "Earlier events must be implemented, but event " },
			{ "isNot", " is not" },
			{ "deflection", "Deflection" },
			{ "noEvents", "No events." },
			{ "clickEvent", "Click on the first event." },
			{ "inputs", " inputs" },
			{ "outcomes", " outcomes" },
			{ "conceptGates", "Concept gates" },
			{ "conceptGatesButton", "Continue" },
			{ "emotions", "Emotions" },
			{ "traits", "Traits" },
			{ "actorRoles", "Actor labels" },
			{ "objectRoles", "Object labels" },
			{ "behaviors", "Actor behaviors" },
			{ "responses", "Object behaviors" },
			{ "conceptGateProblemTitle", "Concpt gate problem" },
			{ "noEvent",
					"An event must be selected before viewing concept gates." },
			{ "conceptGateMsg1",
					"Checked categories retrieve concepts of that kind. The first two columns" },
			{ "conceptGateMsg2",
					"require at least one check to retrieve anything. The other columns require" },
			{ "conceptGateMsg3",
					"at least one check in the top two categories plus another check below." },
			{ "resultsHeader", "Summary of results." },
			{ "realResponses", "Object person's intended response" },
			{ "equationImportProblem", "Equation import problem in lines " },
			{ "missingTerm", "Missing term. Equations, location:" },
			{ "modifierIdentityError",
					"Error in modifier-identity interactions." },
			{ "notBasic", "This function works only at the expert level." },
			{ "PosEval", "Good, Nice" },
			{ "PosPotn", "Big, Powerful" },
			{ "PosActiv", "Active, Fast" },
			{ "NegEval", "Bad, Awful" },
			{ "NegPotn", "Little, Powerless" },
			{ "NegActiv", "Inactive, Slow" },
			{ "infinitely", "infinitely" },
			{ "extremely", "extremely" },
			{ "quite", "quite" },
			{ "slightly", "slightly" },
			{ "neutral", "neutral" },
			{ "dicIdentities", " identity dictionary, N=" },
			{ "dicBehaviors", " behavior dictionary, N=" },
			{ "dicModifiers", " modifier dictionary, N=" },
			{ "dicSettings", " setting dictionary, N=" },
			{ "dicMeans", "Male EPA means, female EPA means:" },
			{ "dicVars", "Male EPA variances, female EPA variances:" },
			{ "inputButton", "Import entries below" },
			{ "exportButton", "Show current entries" },
			{ "eraseData", "Replace current entries" },
			{ "numberProblemTitle", "Number problem" },
			{ "numberProblem", "Need a decimal number." },
			{ "dicImportProblem", "Import problem" },
			{ "countProblem", "Wrong number of terms in some line." },
			{ "badCharacters", "Improper characters after: " },
			{ "historyProblem", "Too many events." },
			{ "termsOfUse",
					"See terms of use at http://www.indiana.edu/~socpsy/ACT/legal.htm" },
			{ "copyright", "Java Interact 2, � 2013 David Heise." } };

	public Object[][] getContents() {
		return contents;
	}
}